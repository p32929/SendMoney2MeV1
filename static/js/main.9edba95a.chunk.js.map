{"version":3,"sources":["serviceWorker.js","Components/SvgHelper.js","Components/Constants.js","Components/Whole.js","index.js"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","SvgHelper","props","path","color","size","style","width","height","viewBox","fill","d","Constants","github_icon","gift_icon","menu_icon","Whole","useState","data","setData","selectedOption","setSelectedOption","open","setOpen","useEffect","fetch","method","redirect","then","response","text","result","console","log","JSON","parse","e","catch","error","Grid","container","direction","AppBar","position","Toolbar","backgroundColor","Typography","variant","flexGrow","IconButton","target","href","Paper","margin","padding","item","xs","fontSize","marginBottom","marginLeft","marginRight","length","justify","CircularProgress","marginTop","Select","onOpen","onClose","onChange","event","parseInt","value","map","index","MenuItem","country","options","alt","title","objectFit","src","logo","desc","descText","whiteSpace","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9edba95a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\n\nconst getThemeObj = (theme) => {\n    return {}\n}\n\nconst useStyles = makeStyles((theme) => (getThemeObj(theme)))\n\nconst SvgHelper = (props) => {\n    const classes = useStyles();\n    const {path, color = \"#FFF\", size = 24} = props\n\n    return (\n        <svg style={{width: size, height: size}} viewBox=\"0 0 24 24\">\n            <path fill={color}\n                  d={path}/>\n        </svg>\n    );\n}\n\nexport default SvgHelper;","export class Constants {\n    static github_icon = \"M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,20.16 22,16.42 22,12A10,10 0 0,0 12,2Z\"\n    static gift_icon = \"M9.06,1.93C7.17,1.92 5.33,3.74 6.17,6H3A2,2 0 0,0 1,8V10A1,1 0 0,0 2,11H11V8H13V11H22A1,1 0 0,0 23,10V8A2,2 0 0,0 21,6H17.83C19,2.73 14.6,0.42 12.57,3.24L12,4L11.43,3.22C10.8,2.33 9.93,1.94 9.06,1.93M9,4C9.89,4 10.34,5.08 9.71,5.71C9.08,6.34 8,5.89 8,5A1,1 0 0,1 9,4M15,4C15.89,4 16.34,5.08 15.71,5.71C15.08,6.34 14,5.89 14,5A1,1 0 0,1 15,4M2,12V20A2,2 0 0,0 4,22H20A2,2 0 0,0 22,20V12H13V20H11V12H2Z\"\n    static menu_icon = \"M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z\"\n}","import React, { useEffect, useState } from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SvgHelper from \"./SvgHelper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Constants } from \"./Constants\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst getThemeObj = (theme) => {\n    return {}\n}\n\nconst useStyles = makeStyles((theme) => (getThemeObj(theme)))\n\nconst Whole = (props) => {\n    const classes = useStyles();\n\n    const [data, setData] = useState([])\n    const [selectedOption, setSelectedOption] = useState(-1)\n    const [open, setOpen] = useState(false)\n\n    useEffect(() => {\n        var requestOptions = {\n            method: 'GET',\n            redirect: 'follow'\n        };\n\n        fetch(\"https://api.npoint.io/4d142c7ac93099c77456\", requestOptions)\n            .then(response => response.text())\n            .then(result => {\n                console.log(result)\n                try {\n                    setData(JSON.parse(result))\n                    setOpen(true)\n                }\n                catch (e) {\n                    setData([])\n                }\n            })\n            .catch(error => {\n                console.log('error', error)\n            })\n    }, [])\n\n    const welcomeTexts = `Send money directly to `\n    const receiversName = \"Fayaz Bin Salam\"\n\n    return (\n        <Grid container direction='column'>\n            <AppBar position='sticky'>\n                <Toolbar style={{ backgroundColor: \"#2196F3\" }}>\n                    <Typography variant='h6' style={{ flexGrow: 1 }}>\n                        Send Money\n                    </Typography>\n                    <IconButton size='small' target=\"_blank\" href='https://github.com/p32929/SendMoney2Me'>\n                        <SvgHelper\n                            path={Constants.github_icon} />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n\n            <Paper style={{ margin: 16, padding: 16 }}>\n                <Grid item xs container direction='column'>\n                    <Typography style={{ color: \"#212121\", fontSize: 16 }}>Welcome</Typography>\n                    <Typography style={{ color: \"#757575\", fontSize: 14 }}>{welcomeTexts}</Typography>\n                    <Typography style={{ color: \"#757575\", fontSize: 14 }}><b>{receiversName}</b></Typography>\n                </Grid>\n            </Paper>\n\n            <Paper style={{ marginBottom: 16, marginLeft: 16, marginRight: 16, padding: 16 }}>\n                <Grid item xs container direction='column'>\n                    <Typography style={{ color: \"#212121\", fontSize: 16 }}>You are sending money from</Typography>\n\n                    {\n                        data.length === 0 && <Grid container direction='row' justify='center'>\n                            <CircularProgress style={{ color: \"#4CAF50\", marginTop: 16 }} />\n\n                        </Grid>\n                    }\n\n                    {\n                        data.length > 0 && <Select open={data.length > 0 && open}\n                            onOpen={() => {\n                                setOpen(true)\n                            }}\n                            onClose={() => {\n                                setOpen(false)\n                            }} onChange={(event) => {\n                                setSelectedOption(parseInt(event.target.value))\n                            }} style={{ marginRight: 16 }}>\n                            {\n                                data?.map((item, index) => {\n                                    return <MenuItem value={index}>{item?.country}</MenuItem>\n                                })\n                            }\n                        </Select>\n                    }\n                </Grid>\n            </Paper>\n\n            {\n                data[selectedOption]?.options.map((value, index) => {\n                    return <Paper style={{ marginBottom: 16, marginLeft: 16, marginRight: 16, padding: 16 }}>\n                        <Grid container direction='row'>\n                            <Grid item>\n                                <img\n                                    alt={data[selectedOption].options[index].title}\n                                    style={{\n                                        height: 36,\n                                        width: 36,\n                                        marginRight: 16,\n                                        objectFit: 'cover'\n                                    }} src={data[selectedOption].options[index].logo} />\n                            </Grid>\n                            <Grid item xs container direction='column'>\n                                <Typography style={{\n                                    color: \"#212121\",\n                                    fontSize: 16,\n                                }}>{data[selectedOption].options[index].title}</Typography>\n                                {\n                                    data[selectedOption].options[index].desc.map((descText) => {\n                                        return <Typography style={{\n                                            color: \"#757575\",\n                                            fontSize: 14,\n                                            whiteSpace: 'pre-line'\n                                        }}>{descText}</Typography>\n                                    })\n                                }\n                            </Grid>\n                        </Grid>\n                    </Paper>\n                })\n            }\n\n        </Grid>\n    );\n}\n\nexport default Whole;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Whole from \"./Components/Whole\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Whole/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}